
When would you want to use a remote repository rather than keeping all your work
local?

You want to use a remote repository when you want a backup of your local
repository, when you want to maintain copies of your repository on multiple
computers, or when you want to share your repository with other people.



Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

You should manually pull changes from a remote, so you can decide which changes
are added to your local repository. There are situations where you do not want
to pull changes automatically like if another person updates the remote in a way
that interferes with what you are working on in your local repository.


Describe the differences between forks, clones, and branches. When would you use
one instead of another?

Forks are repositories created by copying a repository on GitHub to your account
on GitHub. Clones are repositories created by copying a remote repository to a
local machine or created by copying a local repository on a local
machine. Branches are collections of commits in a local repository.

You create a fork when you want to modify a repository on GitHub you do not have
permission to change or you do not want to change. You create a clone when you
want to have a copy of a remote repository on a local machine or when you want
to make a copy of a local repository on a local machine. You create a branch
when you want to create a modified version of a project within a local
repository.


What is the benefit of having a copy of the last known state of the remote
stored locally?

The benefit of having a local copy of the last know state of the remote is you
can compare your local repository to the remote or branch from the remote if you
do not have an internet connection.


How would you collaborate without using Git or GitHub? What would be easier, and
what would be harder?

I would collaborate without Git and GitHub by copying source code to my
computer, editing it, and emailing it to my collaborators to review. To make my
changes easy from them to understand, I would add comments where I made changes
explaining why I made the changes. My collaborators could easily see all my
changes and comments by using diff -u, and they could manually add the changes
they liked to their source. I would use the same process to review the changes
they made to their source and to incorporate those changes into my source. While
this process would work, it would be much more time consuming than using Git and
GitHub.


When would you want to make changes in a separate branch rather than directly in
master? What benefits does each approach have?

You would want to make changes in a separate branch when other people are
working on the project with you. This allows you to make the changes you want to
the project without disrupting the work your collaborators are doing. It also
allows your collaborators to review your changes before they are added to the
master branch.

Making changes in a separate branch is also useful when you are working on your
own, and you want to develop a new feature you are not sure you want to include
in the standard program, or you want to make a version of your program for
another language.

The benefits of using multiple branches come at the cost of a more time
consuming workflow compared to the workflow of using one branch. If your project
does not require multiple branches, you will save yourself time by making all
your changes to the master branch.
